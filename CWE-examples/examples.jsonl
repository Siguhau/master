{"id": 0,"cve": "CVE-2024-3571","cwe": "CWE-22","fixed": false,"bug-type": "Improper Limitation of a Pathname to a Restricted Directory","description": "langchain-ai/langchain is vulnerable to path traversal due to improper limitation of a pathname to a restricted directory ('Path Traversal') in its LocalFileStore functionality. An attacker can leverage this vulnerability to read or write files anywhere on the filesystem, potentially leading to information disclosure or remote code execution. The issue lies in the handling of file paths in the mset and mget methods, where user-supplied input is not adequately sanitized, allowing directory traversal sequences to reach unintended directories.","code": "def _get_full_path(self, key: str) -> Path:\\n        if not re.match(r\"^[a-zA-Z0-9_.\\-/]+$\", key):\\n            raise InvalidKeyException(f\\\"Invalid characters in key: {key}\\\")\\n        return self.root_path / key","answer": "Yes, the code you provided contains a CWE-22 Path Traversal vulnerability. While it attempts to prevent certain characters that are commonly used in path traversal attacks, such as ../, it doesn't provide comprehensive protection against all possible forms of path manipulation. To effectively mitigate path traversal attacks, it's recommended to use a safer approach such as utilizing built-in functions like os.path.abspath() or os.path.realpath() to resolve the full path and ensure it stays within the intended directory structure."}
{"id": 1,"cve": "CVE-2024-3571","cwe": "CWE-22","fixed": true,"bug-type": "Improper Limitation of a Pathname to a Restricted Directory","description": "langchain-ai/langchain is vulnerable to path traversal due to improper limitation of a pathname to a restricted directory ('Path Traversal') in its LocalFileStore functionality. An attacker can leverage this vulnerability to read or write files anywhere on the filesystem, potentially leading to information disclosure or remote code execution. The issue lies in the handling of file paths in the mset and mget methods, where user-supplied input is not adequately sanitized, allowing directory traversal sequences to reach unintended directories.","code": "def _get_full_path(self, key: str) -> Path:\\n        if not re.match(r\"^[a-zA-Z0-9_.\\-/]+$\", key):\\n            raise InvalidKeyException(f\\\"Invalid characters in key: {key}\\\")\\n        full_path = os.path.abspath(self.root_path / key)\\n        common_path = os.path.commonpath([str(self.root_path), full_path])\\n        if common_path != str(self.root_path):\\n            raise InvalidKeyException(\\n                f\\\"Invalid key: {key}. Key should be relative to the full path.\\\"\\n                f\\\"{self.root_path} vs. {common_path} and full path of {full_path}\\\"\\n            )\\n\\n        return Path(full_path)","answer": "No, the code you provided checks for Path Traversal attacks by validating the input `key`. This is done by utilizing pythons `pathlib` module and ensuring that the resulting full path is within the expected directory structure."}
{"id": 2,"cve": "CVE-2024-32982","cwe": "CWE-22","fixed": false,"bug-type": "Improper Limitation of a Pathname to a Restricted Directory","description": "Litestar and Starlite is an Asynchronous Server Gateway Interface (ASGI) framework. Prior to 2.8.3, 2.7.2, and 2.6.4, a Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of LiteStar. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server. The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at `litestar/static_files/base.py`. This vulnerability is fixed in versions 2.8.3, 2.7.2, and 2.6.4.","code": "self.adapter = FileSystemAdapter(file_system)\\nself.directories = tuple(Path(p).resolve() if resolve_symlinks else Path(p) for p in directories)\\nself.is_html_mode = is_html_mode\\nself.send_as_attachment = send_as_attachment\\nself.headers = headers","answer": "Yes, The code you provided may contain a potential CWE-22 vulnerability if the `directories`variable is populated directly. The code resolves each directory path using Path(p).resolve(). This ensures that symbolic links are resolved to their target paths, which could potentially lead to traversing outside the intended directory if the symbolic link points outside.","code": "self.adapter = FileSystemAdapter(file_system)\\nself.directories = tuple(\\nos.path.normpath(Path(p).resolve() if resolve_symlinks else Path(p)) for p in directories\\n)\\nself.is_html_mode = is_html_mode\\nself.send_as_attachment = send_as_attachment\\nself.headers = headers","answer": "No, the usage of os.path.normpath() in addition to resolving paths (Path(p).resolve()) is a good practice to mitigate directory traversal vulnerabilities, including CWE-22. os.path.normpath() normalizes the path, resolving any redundant separators and references to parent directories"}
{"id": 3,"cve": "CVE-2024-32982","cwe": "CWE-22","fixed": true,"bug-type": "Improper Limitation of a Pathname to a Restricted Directory","description": "Litestar and Starlite is an Asynchronous Server Gateway Interface (ASGI) framework. Prior to 2.8.3, 2.7.2, and 2.6.4, a Local File Inclusion (LFI) vulnerability has been discovered in the static file serving component of LiteStar. This vulnerability allows attackers to exploit path traversal flaws, enabling unauthorized access to sensitive files outside the designated directories. Such access can lead to the disclosure of sensitive information or potentially compromise the server. The vulnerability is located in the file path handling mechanism within the static content serving function, specifically at `litestar/static_files/base.py`. This vulnerability is fixed in versions 2.8.3, 2.7.2, and 2.6.4.","code": "self.adapter = FileSystemAdapter(file_system)\\nself.directories = tuple(Path(p).resolve() if resolve_symlinks else Path(p) for p in directories)\\nself.is_html_mode = is_html_mode\\nself.send_as_attachment = send_as_attachment\\nself.headers = headers","answer": "Yes, The code you provided may contain a potential CWE-22 vulnerability if the `directories`variable is populated directly. The code resolves each directory path using Path(p).resolve(). This ensures that symbolic links are resolved to their target paths, which could potentially lead to traversing outside the intended directory if the symbolic link points outside.","code": "self.adapter = FileSystemAdapter(file_system)\\nself.directories = tuple(\\nos.path.normpath(Path(p).resolve() if resolve_symlinks else Path(p)) for p in directories\\n)\\nself.is_html_mode = is_html_mode\\nself.send_as_attachment = send_as_attachment\\nself.headers = headers","answer": "No, the usage of os.path.normpath() in addition to resolving paths (Path(p).resolve()) is a good practice to mitigate directory traversal vulnerabilities, including CWE-22. os.path.normpath() normalizes the path, resolving any redundant separators and references to parent directories"}
{"id": 4,"cve": "CVE-2024-3107","cwe": "CWE-22","fixed": false,"bug-type": "Improper Limitation of a Pathname to a Restricted Directory","description": "The Spectra &#8211; WordPress Gutenberg Blocks plugin for WordPress is vulnerable to Path Traversal in versions up to, and including, 2.12.6 via the get_block_default_attributes function. This allows authenticated attackers, with contributor-level permissions and above, to read the contents of any files named attributes.php on the server, which can contain sensitive information.","code": "if ( isset( $blocks[ $slug ]['plugin-dir'] ) ) {\\n    $main_dir = $blocks[ $slug ]['plugin-dir'];\\n}\\n$block_dir = $main_dir . 'includes/blocks/' . $blocks[ $slug ]['dir'];\\n$assets_file = $block_dir . '/frontend.' . $type . '.php';\\nif ( file_exists( $assets_file ) ) {\\n    // Set default attributes.\\n    $attr_file = $block_dir . '/attributes.php';\\n    if ( file_exists( $attr_file ) ) {\\n         $default_attr = include $attr_file;\\n         $attr = self::get_fallback_values( $default_attr, $attr );\\n         if ( ! empty( $attr['globalBlockStyleId'] ) && $is_gbs ) {\\n             $gbs_class = UAGB_Helper::get_gbs_selector( $attr['globalBlockStyleId'] );\\n         }\\n    }\\n    // Get Assets.\\n    $assets = include $assets_file;\\n}","answer": "Yes, the code does contain a possible vulnerability. There seems to be insufficient Input Sanitization: Ensure that $slug is properly sanitized before being used to access array elements. If $slug is coming from user input, it should be sanitized to prevent directory traversal attacks","code": "if ( isset( $blocks[ $slug ]['plugin-dir'] ) ) {\\n    $main_dir = $blocks[ $slug ]['plugin-dir'];\\n}\\n$block_dir = $main_dir . 'includes/blocks/' . $blocks[ $slug ]['dir'];\\n$assets_file = realpath( $block_dir . '/frontend.' . $type . '.php' );\\nif ( is_string( $assets_file ) && file_exists( $assets_file ) ) {\\n    // Set default attributes.\\n    $attr_file = realpath( $block_dir . '/attributes.php' );\\n    if ( is_string( $attr_file ) && file_exists( $attr_file ) ) {\\n         $default_attr = include $attr_file;\\n         $attr = self::get_fallback_values( $default_attr, $attr );\\n         if ( ! empty( $attr['globalBlockStyleId'] ) && $is_gbs ) {\\n             $gbs_class = UAGB_Helper::get_gbs_selector( $attr['globalBlockStyleId'] );\\n         }\\n    }\\n    // Get Assets.\\n    $assets = include $assets_file;\\n}","answer": "No, based on the provided code snippet, it's not evident that there's a CWE-22 (Improper Limitation of a Pathname to a Restricted Directory) vulnerability. However, the vulnerability could exist if untrusted data were used to construct the paths in $block_dir, $assets_file, and $attr_file."}
{"id": 5,"cve": "CVE-2024-3107","cwe": "CWE-22","fixed": true,"bug-type": "Improper Limitation of a Pathname to a Restricted Directory","description": "The Spectra &#8211; WordPress Gutenberg Blocks plugin for WordPress is vulnerable to Path Traversal in versions up to, and including, 2.12.6 via the get_block_default_attributes function. This allows authenticated attackers, with contributor-level permissions and above, to read the contents of any files named attributes.php on the server, which can contain sensitive information.","code": "if ( isset( $blocks[ $slug ]['plugin-dir'] ) ) {\\n    $main_dir = $blocks[ $slug ]['plugin-dir'];\\n}\\n$block_dir = $main_dir . 'includes/blocks/' . $blocks[ $slug ]['dir'];\\n$assets_file = $block_dir . '/frontend.' . $type . '.php';\\nif ( file_exists( $assets_file ) ) {\\n    // Set default attributes.\\n    $attr_file = $block_dir . '/attributes.php';\\n    if ( file_exists( $attr_file ) ) {\\n         $default_attr = include $attr_file;\\n         $attr = self::get_fallback_values( $default_attr, $attr );\\n         if ( ! empty( $attr['globalBlockStyleId'] ) && $is_gbs ) {\\n             $gbs_class = UAGB_Helper::get_gbs_selector( $attr['globalBlockStyleId'] );\\n         }\\n    }\\n    // Get Assets.\\n    $assets = include $assets_file;\\n}","answer": "Yes, the code does contain a possible vulnerability. There seems to be insufficient Input Sanitization: Ensure that $slug is properly sanitized before being used to access array elements. If $slug is coming from user input, it should be sanitized to prevent directory traversal attacks","code": "if ( isset( $blocks[ $slug ]['plugin-dir'] ) ) {\\n    $main_dir = $blocks[ $slug ]['plugin-dir'];\\n}\\n$block_dir = $main_dir . 'includes/blocks/' . $blocks[ $slug ]['dir'];\\n$assets_file = realpath( $block_dir . '/frontend.' . $type . '.php' );\\nif ( is_string( $assets_file ) && file_exists( $assets_file ) ) {\\n    // Set default attributes.\\n    $attr_file = realpath( $block_dir . '/attributes.php' );\\n    if ( is_string( $attr_file ) && file_exists( $attr_file ) ) {\\n         $default_attr = include $attr_file;\\n         $attr = self::get_fallback_values( $default_attr, $attr );\\n         if ( ! empty( $attr['globalBlockStyleId'] ) && $is_gbs ) {\\n             $gbs_class = UAGB_Helper::get_gbs_selector( $attr['globalBlockStyleId'] );\\n         }\\n    }\\n    // Get Assets.\\n    $assets = include $assets_file;\\n}","answer": "No, based on the provided code snippet, it's not evident that there's a CWE-22 (Improper Limitation of a Pathname to a Restricted Directory) vulnerability. However, the vulnerability could exist if untrusted data were used to construct the paths in $block_dir, $assets_file, and $attr_file."}
{"id": 6,"cve": "CVE-2024-0798","cwe": "CWE-284","fixed": false,"bug-type": "Improper Access Control","description": "A privilege escalation vulnerability exists in mintplex-labs/anything-llm, allowing users with 'default' role to delete documents uploaded by 'admin'. Despite the intended restriction that prevents 'default' role users from deleting admin-uploaded documents, an attacker can exploit this vulnerability by sending a crafted DELETE request to the /api/system/remove-document endpoint. This vulnerability is due to improper access control checks, enabling unauthorized document deletion and potentially leading to loss of data integrity.","code": "app.get(\"/system/local-files\", [validatedRequest], async (_, response) => {\n    try {\n      const localFiles = await viewLocalFiles();\n      response.status(200).json({ localFiles });\n    } catch (e) {\n      console.log(e.message, e);\n      response.sendStatus(500).end();\n    }\n  });","answer": "Yes, it is a possibility that this code contains a CWE-284: Improper Access Control Vulnerability because while it does check for `validatedRequest` it may not specify what roles should have access. This is important as the function views local files can be visible to all users.","code": "app.get(\n    \"/system/local-files\",\n    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n    async (_, response) => {\n      try {\n        const localFiles = await viewLocalFiles();\n        response.status(200).json({ localFiles });\n      } catch (e) {\n        console.log(e.message, e);\n        response.sendStatus(500).end();\n      }\n    }\n  );","answer": "No, the included code does not include any potential risks related to the listed CWEs."     }
{"id": 7,"cve": "CVE-2024-0798","cwe": "CWE-284","fixed": true,"bug-type": "Improper Access Control","description": "A privilege escalation vulnerability exists in mintplex-labs/anything-llm, allowing users with 'default' role to delete documents uploaded by 'admin'. Despite the intended restriction that prevents 'default' role users from deleting admin-uploaded documents, an attacker can exploit this vulnerability by sending a crafted DELETE request to the /api/system/remove-document endpoint. This vulnerability is due to improper access control checks, enabling unauthorized document deletion and potentially leading to loss of data integrity.","code": "app.get(\"/system/local-files\", [validatedRequest], async (_, response) => {\n    try {\n      const localFiles = await viewLocalFiles();\n      response.status(200).json({ localFiles });\n    } catch (e) {\n      console.log(e.message, e);\n      response.sendStatus(500).end();\n    }\n  });","answer": "Yes, it is a possibility that this code contains a CWE-284: Improper Access Control Vulnerability because while it does check for `validatedRequest` it may not specify what roles should have access. This is important as the function views local files can be visible to all users.","code": "app.get(\n    \"/system/local-files\",\n    [validatedRequest, flexUserRoleValid([ROLES.admin, ROLES.manager])],\n    async (_, response) => {\n      try {\n        const localFiles = await viewLocalFiles();\n        response.status(200).json({ localFiles });\n      } catch (e) {\n        console.log(e.message, e);\n        response.sendStatus(500).end();\n      }\n    }\n  );","answer": "No, the included code does not include any potential risks related to the listed CWEs."     }
{"id": 8,"cve": "CVE-2023-4650","cwe": "CWE-284","fixed": false,"bug-type": "Improper Access Control","description": "Improper Access Control in GitHub repository instantsoft/icms2 prior to 2.16.1-git.","code": "public function getProfileEditMenu($profile) {\n    $menu = [\n        [\n            'title' => LANG_USERS_EDIT_PROFILE_MAIN,\n            'url'   => href_to_profile($profile, ['edit'])\n        ]\n    ];\n\n    if ($this->cms_template->hasProfileThemesOptions() && $this->options['is_themes_on']) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_THEME,\n            'url'   => href_to_profile($profile, ['edit', 'theme'])\n        ];\n    }\n\n    if (cmsEventsManager::getEventListeners('user_notify_types')) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_NOTICES,\n            'url'   => href_to_profile($profile, ['edit', 'notices'])\n        ];\n    }\n\n    if (!empty($this->options['is_friends_on'])) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_PRIVACY,\n            'url'   => href_to_profile($profile, ['edit', 'privacy'])\n        ];\n    }\n\n    $menu[] = [\n        'title' => LANG_SECURITY,\n        'url'   => href_to_profile($profile, ['edit', 'password'])\n    ];\n\n    $menu[] = [\n        'title' => LANG_USERS_SESSIONS,\n        'url'   => href_to_profile($profile, ['edit', 'sessions'])\n    ];\n\n    list($menu, $profile) = cmsEventsManager::hook('profile_edit_menu', [$menu, $profile]);\n\n    return $menu;\n}",     "answer": "Yes, it is a possibility that this code contains a CWE-284: Improper Access Control Vulnerability because this function that gives the edit menu for a profile does not check what profile is being edited.","code": "public function getProfileEditMenu($profile) {\n    $menu = [\n        [\n            'title' => LANG_USERS_EDIT_PROFILE_MAIN,\n            'url'   => href_to_profile($profile, ['edit'])\n        ]\n    ];\n\n    if ($this->cms_template->hasProfileThemesOptions() && $this->options['is_themes_on']) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_THEME,\n            'url'   => href_to_profile($profile, ['edit', 'theme'])\n        ];\n    }\n\n    if (cmsEventsManager::getEventListeners('user_notify_types')) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_NOTICES,\n            'url'   => href_to_profile($profile, ['edit', 'notices'])\n        ];\n    }\n\n    if (!empty($this->options['is_friends_on'])) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_PRIVACY,\n            'url'   => href_to_profile($profile, ['edit', 'privacy'])\n        ];\n    }\n    if ($this->is_own_profile || (!$profile['is_admin'] && $this->cms_user->is_admin)) {\n        $menu[] = [\n            'title' => LANG_SECURITY,\n            'url'   => href_to_profile($profile, ['edit', 'password'])\n        ];\n        $menu[] = [\n            'title' => LANG_USERS_SESSIONS,\n            'url'   => href_to_profile($profile, ['edit', 'sessions'])\n        ];\n    }\n\n    list($menu, $profile) = cmsEventsManager::hook('profile_edit_menu', [$menu, $profile]);\n\n    return $menu;\n}","answer": "No, this function does not seem to contain any CWE-284 vulnerabilities because it does check if the user has permission to edit the security and session menu."}
{"id": 9,"cve": "CVE-2023-4650","cwe": "CWE-284","fixed": true,"bug-type": "Improper Access Control","description": "Improper Access Control in GitHub repository instantsoft/icms2 prior to 2.16.1-git.","code": "public function getProfileEditMenu($profile) {\n    $menu = [\n        [\n            'title' => LANG_USERS_EDIT_PROFILE_MAIN,\n            'url'   => href_to_profile($profile, ['edit'])\n        ]\n    ];\n\n    if ($this->cms_template->hasProfileThemesOptions() && $this->options['is_themes_on']) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_THEME,\n            'url'   => href_to_profile($profile, ['edit', 'theme'])\n        ];\n    }\n\n    if (cmsEventsManager::getEventListeners('user_notify_types')) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_NOTICES,\n            'url'   => href_to_profile($profile, ['edit', 'notices'])\n        ];\n    }\n\n    if (!empty($this->options['is_friends_on'])) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_PRIVACY,\n            'url'   => href_to_profile($profile, ['edit', 'privacy'])\n        ];\n    }\n\n    $menu[] = [\n        'title' => LANG_SECURITY,\n        'url'   => href_to_profile($profile, ['edit', 'password'])\n    ];\n\n    $menu[] = [\n        'title' => LANG_USERS_SESSIONS,\n        'url'   => href_to_profile($profile, ['edit', 'sessions'])\n    ];\n\n    list($menu, $profile) = cmsEventsManager::hook('profile_edit_menu', [$menu, $profile]);\n\n    return $menu;\n}",     "answer": "Yes, it is a possibility that this code contains a CWE-284: Improper Access Control Vulnerability because this function that gives the edit menu for a profile does not check what profile is being edited.","code": "public function getProfileEditMenu($profile) {\n    $menu = [\n        [\n            'title' => LANG_USERS_EDIT_PROFILE_MAIN,\n            'url'   => href_to_profile($profile, ['edit'])\n        ]\n    ];\n\n    if ($this->cms_template->hasProfileThemesOptions() && $this->options['is_themes_on']) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_THEME,\n            'url'   => href_to_profile($profile, ['edit', 'theme'])\n        ];\n    }\n\n    if (cmsEventsManager::getEventListeners('user_notify_types')) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_NOTICES,\n            'url'   => href_to_profile($profile, ['edit', 'notices'])\n        ];\n    }\n\n    if (!empty($this->options['is_friends_on'])) {\n        $menu[] = [\n            'title' => LANG_USERS_EDIT_PROFILE_PRIVACY,\n            'url'   => href_to_profile($profile, ['edit', 'privacy'])\n        ];\n    }\n    if ($this->is_own_profile || (!$profile['is_admin'] && $this->cms_user->is_admin)) {\n        $menu[] = [\n            'title' => LANG_SECURITY,\n            'url'   => href_to_profile($profile, ['edit', 'password'])\n        ];\n        $menu[] = [\n            'title' => LANG_USERS_SESSIONS,\n            'url'   => href_to_profile($profile, ['edit', 'sessions'])\n        ];\n    }\n\n    list($menu, $profile) = cmsEventsManager::hook('profile_edit_menu', [$menu, $profile]);\n\n    return $menu;\n}","answer": "No, this function does not seem to contain any CWE-284 vulnerabilities because it does check if the user has permission to edit the security and session menu."}